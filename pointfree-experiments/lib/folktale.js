!function(n,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.folktale=e():n.folktale=e()}(self,(function(){return(()=>{"use strict";var n={1650:(n,e,t)=>{n.exports={union:t(8581)}},5997:(n,e,t)=>{var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},o=t(2801),u=o.tagSymbol,i=o.typeSymbol,a=function(){return"{ "+(n=this,Object.keys(n).map((function(e){return e+": "+l(n[e])})).join(", ")+" }");var n},c=function(){return"["+this.map(l).join(", ")+"]"},s=function(){return"null"},l=function(n){return void 0===n?"undefined":"function"==typeof n?"[Function"+((""!==(t=n).name?": "+t.name:"")+"]"):Object.is(n,-0)?"-0":"number"==typeof n?n:"symbol"===(void 0===n?"undefined":r(n))?n.toString():"object"===(void 0===n?"undefined":r(n))?(e=n,null===e?s:Array.isArray(e)?c:function(n){return!n.toString||n.toString===Object.prototype.toString}(e)?a:e.toString).call(n):JSON.stringify(n);var e,t};n.exports=function(n,e){var t=e[i],r=e[i]+"."+n.prototype[u];return e[Symbol.toStringTag]=t,n.prototype[Symbol.toStringTag]=r,e.toString=function(){return t},n.toString=function(){return r},n.prototype.toString=function(){return r+"("+a.call(this)+")"},e.inspect=e.toString,n.inspect=n.toString,n.prototype.inspect=n.prototype.toString,n}},3607:(n,e,t)=>{var r=t(6566),o=t(8579),u=t(8234),i=t(5091),a=t(308),c=t(2801),s=c.tagSymbol,l=c.typeSymbol,f=Object.prototype.toString,p=Object.getPrototypeOf,h=function(n){return null!=n&&("function"==typeof n[u.equals]||"function"==typeof n.equals)},d=function(n){return!(Object(n)!==n||p(n)&&n.toString&&f.call(n)!==n.toString())},v=function n(e){var t=function(n,t){if(n===t)return!0;var r=h(n),u=h(t);return r?!!u&&o(n,t):e(n,t)},u=function(n,e){return n.prototype.equals=function(n){return r(e)(this[s]+"#equals",n),o=n,this[l]===o[l]&&this[s]===o[s]&&function(n,e,r){for(var o=0;o<r.length;++o){var u=n[r[o]],i=e[r[o]];if(!t(u,i))return!1}return!0}(this,n,Object.keys(this));var o},i(n.prototype),n};return a(n,u,{type:"(Variant, Union) => Void"}),u};n.exports=v((function n(e,t){if(e===t)return!0;var r=h(e),u=h(t);if(r)return!!u&&o(e,t);if(Array.isArray(e)&&Array.isArray(t))return e.length===t.length&&e.every((function(e,r){return n(e,t[r])}));if(d(e)&&d(t)){var i=Object.keys(e),a=Object.keys(t),c=new Set(a);return i.length===a.length&&p(e)===p(t)&&i.every((function(n){return c.has(n)&&e[n]===t[n]}))}return!1})),n.exports.withCustomComparison=v},3051:(n,e,t)=>{n.exports={serialization:t(417),equality:t(3607),debugRepresentation:t(5997)}},417:(n,e,t)=>{function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}var o,u,i=t(2801),a=i.tagSymbol,c=i.typeSymbol,s=t(3482),l=t(2705),f=t(8672),p=(u=c,o=function(n){return n[u]},function(n){return n.reduce((function(n,e){return n[o(e)]=e,n}),{})}),h=function(n,e){if(e!==n)throw new TypeError("\n       The JSON structure was generated from "+e+".\n       You are trying to parse it as "+n+". \n    ")},d=function(n){return function(e){if(null!==e&&"string"==typeof e["@@type"]){var t=e["@@type"];return n[t]?n[t].fromJSON(e,n,!0):e}return e}},v=function(n){return void 0===n?null:null!==n&&"function"==typeof n.toJSON?n.toJSON():n};n.exports=function(n,e){var t=e[c],o=n.prototype[a];n.prototype.toJSON=function(){var n;return r(n={},"@@type",t),r(n,"@@tag",o),r(n,"@@value",s(this,v)),n},e.fromJSON=function(n){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r({},t,e),u=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=n["@@type"],a=n["@@tag"],c=n["@@value"];h(t,i);var v=u?o:p(l(o)),y=s(c,d(v));return f(Object.create(e[a].prototype),y)}}},8581:(n,e,t)=>{n.exports={union:t(2801),derivations:t(3051)}},2801:(n,e,t)=>{function r(n,e){for(var t in e){var r=e[t];r.configurable=r.enumerable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,t,r)}return n}function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}var u=t(8289),i=t(8672),a=t(8740),c=Symbol.for("@@folktale:adt:type"),s=Symbol.for("@@folktale:adt:tag"),l=Symbol.for("@@folktale:adt:default"),f=Symbol.for("@@meta:magical"),p=Object.keys;var h=function(n,e){var t,h,v=Object.create(d),y=function(n,e,t){return h=function(e,c){var p,h,d,v,y;function m(){}function b(){var n=new m;return i(n,c.apply(void 0,arguments)||{}),n}return m.prototype=Object.create(t),i(m.prototype,(o(h={},s,e),(d={}).constructor=d.constructor||{},d.constructor.get=function(){return m},d[p="is"+e]=d[p]||{},d[p].get=function(){return u(".is"+e+" is deprecated. Use "+e+".hasInstance(value)\ninstead to check if a value belongs to the ADT variant."),!0},o(h,"matchWith",(function(t){if(a(n+"'s "+e+"#matchWith",t),e in t)return t[e](this);if(l in t)return t[l]();throw new Error('Variant "'+(r=e)+"\" not covered in pattern.\nThis could mean you did not include all variants in your Union's matchWith function.\n\nFor example, if you had this Union:\n\nconst Operation = union({\n    Add: (a, b) => ({ a, b }),\n    Subtract: (a, b) => ({ a, b }),\n})\n\nBut wrote this matchWith:\n\nop.matchWith({\n    Add: ({ a, b }) => a + b\n    // Subtract not implemented!\n})\n\nIt would throw this error because we need to check against 'Subtract'. Check your matchWith function's argument, \nit's possibly missing the '"+r+"' method in the object you've passed.");var r})),r(h,d),h)),i(b,(o(v={},f,c[f]),(y={}).tag=y.tag||{},y.tag.get=function(){return e},y.type=y.type||{},y.type.get=function(){return n},y.constructor=y.constructor||{},y.constructor.get=function(){return m},o(v,"prototype",m.prototype),o(v,"hasInstance",(function(n){return Boolean(n)&&t.hasInstance(n)&&n[s]===e})),r(v,y),v)),b},p(c=e).reduce((function(n,e){return n[e]=h(e,c[e]),n}),{});var c,h}(n,e,v);return i(v,y,(o(t={},c,n),o(t,"variants",p(h=y).map((function(n){return h[n]}))),o(t,"hasInstance",(function(n){return Boolean(n)&&n[c]===this[c]})),t)),v},d={derive:function(){for(var n=this,e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];return t.forEach((function(e){n.variants.forEach((function(t){return e(t,n)}))})),this}};h.Union=d,h.typeSymbol=c,h.tagSymbol=s,h.any=l,n.exports=h},6867:(n,e,t)=>{var r,o,u,i=t(9966),a=t(2451)((function(n){return t(7771)})),c=t(4865),s=c.Pending,l=c.Cancelled,f=c.Rejected,p=c.Resolved,h=function(n){return n.matchWith({Resolved:function(n){return"resolved"},Rejected:function(n){return"rejected"},Cancelled:function(n){return"cancelled"}})},d=function(n,e){if(!s.hasInstance(n._state))throw new Error("Only pending deferreds can be "+h(e)+", this deferred is already "+h(n._state)+".");n._state=e;for(var t=n._listeners,r=function(n){e.matchWith({Resolved:function(e){var r=e.value;return t[n].onResolved(r)},Rejected:function(e){var r=e.reason;return t[n].onRejected(r)},Cancelled:function(e){return t[n].onCancelled()}})},o=0;o<t.length;++o)r(o);n._listeners=[]};function v(){i(this,"_state",s()),i(this,"_listeners",[])}v.prototype=(r={get _state(){throw new TypeError("Deferred.prototype is abstract and does not implement ._state.")},get _listeners(){throw new TypeError("Deferred.prototype is abstract and does not implement ._listeners")},resolve:function(n){return d(this,p(n)),this},reject:function(n){return d(this,f(n)),this},cancel:function(){return d(this,l()),this},maybeCancel:function(){return s.hasInstance(this._state)&&this.cancel(),this},listen:function(n){var e=this;return this._state.matchWith({Pending:function(t){return e._listeners.push(n)},Cancelled:function(e){return n.onCancelled()},Resolved:function(e){var t=e.value;return n.onResolved(t)},Rejected:function(e){var t=e.reason;return n.onRejected(t)}}),this},promise:function(){var n=this;return new Promise((function(e,t){n.listen({onCancelled:function(n){return t(l())},onResolved:e,onRejected:t})}))},future:function(){var n=new(a());return this.listen({onCancelled:function(e){return d(n,l())},onRejected:function(e){return d(n,f(e))},onResolved:function(e){return d(n,p(e))}}),n},toString:function(){var n=this._listeners.length;return"folktale:Deferred("+this._state+", "+n+" listeners)"},inspect:function(){return this.toString()}},u="folktale:Deferred",(o=Symbol.toStringTag)in r?Object.defineProperty(r,o,{value:u,enumerable:!0,configurable:!0,writable:!0}):r[o]=u,r),n.exports=v},4865:(n,e,t)=>{var r=t(8581),o=r.union,u=r.derivations,i=u.equality,a=u.debugRepresentation,c=o("folktale:ExecutionState",{Pending:function(){return{}},Cancelled:function(){return{}},Resolved:function(n){return{value:n}},Rejected:function(n){return{reason:n}}}).derive(i,a);n.exports=c},7771:(n,e,t)=>{var r=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),o=t(9966),u=t(5091),i=t(6867),a=t(4865),c=a.Pending,s=a.Resolved,l=a.Rejected,f=t(8289),p=function(){function n(){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),o(this,"_state",c()),o(this,"_listeners",[])}return r(n,[{key:"listen",value:function(n){var e=this;return this._state.matchWith({Pending:function(){return e._listeners.push(n)},Cancelled:function(){return n.onCancelled()},Resolved:function(e){var t=e.value;return n.onResolved(t)},Rejected:function(e){var t=e.reason;return n.onRejected(t)}}),this}},{key:"chain",value:function(n){var e=new i;return this.listen({onCancelled:function(){return e.cancel()},onRejected:function(n){return e.reject(n)},onResolved:function(t){n(t).listen({onCancelled:function(){return e.cancel()},onRejected:function(n){return e.reject(n)},onResolved:function(n){return e.resolve(n)}})}}),e.future()}},{key:"map",value:function(e){return this.chain((function(t){return n.of(e(t))}))}},{key:"apply",value:function(n){return this.chain((function(e){return n.map(e)}))}},{key:"bimap",value:function(n,e){var t=new i;return this.listen({onCancelled:function(){return t.cancel()},onRejected:function(e){return t.reject(n(e))},onResolved:function(n){return t.resolve(e(n))}}),t.future()}},{key:"mapRejected",value:function(n){return this.bimap(n,(function(n){return n}))}},{key:"recover",value:function(n){return f("`.recover` was renamed to `.orElse` for consistency, and thus `.recover(handler)` is deprecated. Use `.orElse(handler)` instead."),this.orElse(n)}},{key:"orElse",value:function(n){var e=new i;return this.listen({onCancelled:function(){return e.cancel()},onResolved:function(n){return e.resolve(n)},onRejected:function(t){n(t).listen({onCancelled:function(){return e.cancel()},onResolved:function(n){return e.resolve(n)},onRejected:function(n){return e.reject(n)}})}}),e.future()}},{key:"willMatchWith",value:function(n){var e=new i,t=function(n){return function(t){return n(t).listen({onCancelled:function(){return e.cancel()},onResolved:function(n){return e.resolve(n)},onRejected:function(n){return e.reject(n)}})}};return this.listen({onCancelled:t(n.Cancelled),onResolved:t(n.Resolved),onRejected:t(n.Rejected)}),e.future()}},{key:"swap",value:function(){var n=new i;return this.listen({onCancelled:function(){return n.cancel()},onRejected:function(e){return n.resolve(e)},onResolved:function(e){return n.reject(e)}}),n.future()}},{key:"toString",value:function(){var n=this._listeners.length;return"folktale:Future("+this._state+", "+n+" listeners)"}},{key:"inspect",value:function(){return this.toString()}},{key:"toPromise",value:function(){return t(2150)(this)}},{key:"_state",get:function(){throw new TypeError("Future.prototype._state should be implemented in an inherited object.")}},{key:"_listeners",get:function(){throw new TypeError("Future.prototype._listeners should be implemented in an inherited object.")}}]),n}();Object.assign(p,{of:function(n){var e=new p;return e._state=s(n),e},rejected:function(n){var e=new p;return e._state=l(n),e},fromPromise:function(n){return t(8820)(n)}}),u(p),u(p.prototype),n.exports=p},2878:(n,e,t)=>{var r=t(7771);n.exports={of:r.of,rejected:r.rejected,fromPromise:r.fromPromise,_Deferred:t(6867),_ExecutionState:t(4865),_Future:r}},2707:(n,e,t)=>{n.exports={future:t(2878),task:t(8767)}},8399:n=>{var e=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),t=function(){function n(e,t){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this._task=e,this._deferred=t,this._links=[]}return e(n,[{key:"cancel",value:function(){return this._deferred.maybeCancel(),this._links.forEach((function(n){return n.cancel()})),this}},{key:"listen",value:function(n){return this._deferred.listen(n),this}},{key:"promise",value:function(){return this._deferred.promise()}},{key:"future",value:function(){return this._deferred.future()}},{key:"link",value:function(n){return this._links.push(n),this}}]),n}();n.exports=t},2544:(n,e,t)=>{var r=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),o=t(5091),u=(t(1600),t(6867)),i=t(8399),a=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this._computation=e}return r(n,[{key:"chain",value:function(e){var t=this;return new n((function(n){var r=t.run();n.onCancelled((function(){return r.cancel()})),r.listen({onCancelled:n.cancel,onRejected:n.reject,onResolved:function(t){r.link(e(t).run().listen({onCancelled:n.cancel,onRejected:n.reject,onResolved:n.resolve}))}})}))}},{key:"map",value:function(e){var t=this;return new n((function(n){var r=t.run();n.onCancelled((function(){return r.cancel()})),r.listen({onCancelled:n.cancel,onRejected:n.reject,onResolved:function(t){return n.resolve(e(t))}})}))}},{key:"mapRejected",value:function(e){var t=this;return new n((function(n){var r=t.run();n.onCancelled((function(){return r.cancel()})),r.listen({onCancelled:n.cancel,onRejected:function(t){return n.reject(e(t))},onResolved:n.resolve})}))}},{key:"apply",value:function(n){return this.chain((function(e){return n.map(e)}))}},{key:"bimap",value:function(e,t){var r=this;return new n((function(n){var o=r.run();n.onCancelled((function(){return o.cancel()})),o.listen({onCancelled:n.cancel,onRejected:function(t){return n.reject(e(t))},onResolved:function(e){return n.resolve(t(e))}})}))}},{key:"willMatchWith",value:function(e){var t=this;return new n((function(n){var r=t.run();n.onCancelled((function(){return r.cancel()}));var o=function(e){return function(t){return r.link(e(t).run().listen({onCancelled:n.cancel,onRejected:n.reject,onResolved:n.resolve}))}};r.listen({onCancelled:o((function(n){return e.Cancelled()})),onRejected:o(e.Rejected),onResolved:o(e.Resolved)})}))}},{key:"swap",value:function(){var e=this;return new n((function(n){var t=e.run();n.onCancelled((function(){return t.cancel()})),t.listen({onCancelled:n.cancel,onRejected:n.resolve,onResolved:n.reject})}))}},{key:"orElse",value:function(e){var t=this;return new n((function(n){var r=t.run();n.onCancelled((function(){return r.cancel()})),r.listen({onCancelled:n.cancel,onResolved:n.resolve,onRejected:function(t){r.link(e(t).run().listen({onCancelled:n.cancel,onRejected:n.reject,onResolved:n.resolve}))}})}))}},{key:"or",value:function(e){var t=this;return new n((function(n){var r=t.run(),o=e.run(),u=!1;n.onCancelled((function(){r.cancel(),o.cancel()}));var i=function(n,e){return function(t){u||(u=!0,e.cancel(),n(t))}};r.listen({onRejected:i(n.reject,o),onCancelled:i(n.cancel,o),onResolved:i(n.resolve,o)}),o.listen({onRejected:i(n.reject,r),onCancelled:i(n.cancel,r),onResolved:i(n.resolve,r)})}))}},{key:"and",value:function(e){var t=this;return new n((function(n){var r=t.run(),o=e.run(),u=null,i=null,a=!1,c=!1,s=!1;n.onCancelled((function(){r.cancel(),o.cancel()}));var l=function(e){return function(t){s||(e(t),a&&c&&n.resolve([u,i]))}},f=function(n,e){return function(t){s||(s=!0,e.cancel(),n(t))}};r.listen({onRejected:f(n.reject,o),onCancelled:f(n.cancel,o),onResolved:l((function(n){u=n,a=!0}))}),o.listen({onRejected:f(n.reject,r),onCancelled:f(n.cancel,r),onResolved:l((function(n){i=n,c=!0}))})}))}},{key:"run",value:function(){var n=new u,e=[],t=[],r=!1,o=!1;n.listen({onCancelled:function(n){o=!0,r=!0,t.forEach((function(n){return n()})),e.forEach((function(n){return n()})),t=[],e=[]},onResolved:function(n){o=!0,e.forEach((function(n){return n()})),e=[],t=[]},onRejected:function(n){o=!0,e.forEach((function(n){return n()})),e=[],t=[]}});var a=new i(this,n);return this._computation({reject:function(e){n.reject(e)},resolve:function(e){n.resolve(e)},cancel:function(e){n.maybeCancel()},get isCancelled(){return r},cleanup:function(n){if(o)throw new Error("Can't attach a cleanup handler after the task is settled.");e.push(n)},onCancelled:function(n){if(o)throw new Error("Can't attach a cancellation handler after the task is settled.");t.push(n)}}),a}}]),n}();Object.assign(a,{of:function(n){return new a((function(e){return e.resolve(n)}))},rejected:function(n){return new a((function(e){return e.reject(n)}))}}),o(a),o(a.prototype),n.exports=a},2499:(n,e,t)=>{var r=t(2544),o=function n(e){return function(t){var r=e.next(t),o=r.value;return r.done?o:o.chain(n(e))}};n.exports=function(n){return new r((function(e){return e.resolve(n())})).chain((function(n){return o(n)()}))}},8767:(n,e,t)=>{var r=t(2544);n.exports={of:r.of,rejected:r.rejected,task:t(206),waitAny:t(7364),waitAll:t(3370),do:t(2499),_Task:r,_TaskExecution:t(8399),fromNodeback:function(n){return t(5286)(n)},fromPromised:function(n){return t(9449)(n)}}},206:(n,e,t)=>{var r=t(2544);n.exports=function(n){return new r(n)}},3370:(n,e,t)=>{var r=t(2544).of;n.exports=function(n){return n.reduce((function(n,e){return n.and(e).map((function(n){var e=function(n,e){if(Array.isArray(n))return n;if(Symbol.iterator in Object(n))return function(n,e){var t=[],r=!0,o=!1,u=void 0;try{for(var i,a=n[Symbol.iterator]();!(r=(i=a.next()).done)&&(t.push(i.value),!e||t.length!==e);r=!0);}catch(n){o=!0,u=n}finally{try{!r&&a.return&&a.return()}finally{if(o)throw u}}return t}(n,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}(n,2),t=e[0],r=e[1];return[].concat(function(n){if(Array.isArray(n)){for(var e=0,t=Array(n.length);e<n.length;e++)t[e]=n[e];return t}return Array.from(n)}(t),[r])}))}),r([]))}},7364:n=>{n.exports=function(n){if(0===n.length)throw new Error("Task.waitAny() requires a non-empty array of tasks.");return n.reduce((function(n,e){return n.or(e)}))}},2150:(n,e,t)=>{var r=t(4865).Cancelled;n.exports=function(n){return new Promise((function(e,t){n.listen({onResolved:function(n){return e(n)},onRejected:function(n){return t(n)},onCancelled:function(){return t(r())}})}))}},4835:(n,e,t)=>{n.exports={resultToValidation:t(1969),resultToMaybe:t(6105),validationToResult:t(9057),validationToMaybe:t(8129),maybeToValidation:t(9894),maybeToResult:t(5601),nullableToValidation:t(613),nullableToResult:t(6329),nullableToMaybe:t(7889),nodebackToTask:t(5286),futureToPromise:t(2150),promiseToFuture:t(8820),promisedToTask:t(9449)}},5601:(n,e,t)=>{var r=t(136),o=r.Error,u=r.Ok;n.exports=function(n,e){return n.matchWith({Nothing:function(){return o(e)},Just:function(n){var e=n.value;return u(e)}})}},9894:(n,e,t)=>{var r=t(2418),o=r.Success,u=r.Failure;n.exports=function(n,e){return n.matchWith({Nothing:function(){return u(e)},Just:function(n){var e=n.value;return o(e)}})}},5286:(n,e,t)=>{var r=t(8767).task;n.exports=function(n){return function(){for(var e=arguments.length,t=Array(e),o=0;o<e;o++)t[o]=arguments[o];return r((function(e){return n.apply(void 0,t.concat([function(n,t){e.isCancelled||(n?e.reject(n):e.resolve(t))}]))}))}}},7889:(n,e,t)=>{var r=t(5257),o=r.Nothing,u=r.Just;n.exports=function(n){return null!=n?u(n):o()}},6329:(n,e,t)=>{var r=t(136),o=r.Error,u=r.Ok,i=t(8289);n.exports=function(n,e){var t=arguments.length<2;t&&i("nullableToResult(value) is being deprecated in favour of providing an explicit fallback value.\nnullableToResult(value, fallback) is the new preferred form of this function.\n");var r=t?n:e;return null!=n?u(n):o(r)}},613:(n,e,t)=>{var r=t(2418),o=r.Success,u=r.Failure;n.exports=function(n,e){return null!=n?o(n):u(e)}},8820:(n,e,t)=>{var r=t(4865).Cancelled,o=t(6867);n.exports=function(n){var e=new o;return n.then((function(n){return e.resolve(n)}),(function(n){r.hasInstance(n)?e.cancel():e.reject(n)})),e.future()}},9449:(n,e,t)=>{var r=t(8767).task;n.exports=function(n){return function(){for(var e=arguments.length,t=Array(e),o=0;o<e;o++)t[o]=arguments[o];return r((function(e){var r=function(n){return function(t){e.isCancelled||n(t)}};n.apply(void 0,t).then(r((function(n){return e.resolve(n)})),r((function(n){return e.reject(n)})))}))}}},6105:(n,e,t)=>{var r=t(5257),o=r.Just,u=r.Nothing;n.exports=function(n){return n.matchWith({Error:function(n){return n.value,u()},Ok:function(n){var e=n.value;return o(e)}})}},1969:(n,e,t)=>{var r=t(2418),o=r.Success,u=r.Failure;n.exports=function(n){return n.matchWith({Error:function(n){var e=n.value;return u(e)},Ok:function(n){var e=n.value;return o(e)}})}},8129:(n,e,t)=>{var r=t(5257),o=r.Just,u=r.Nothing;n.exports=function(n){return n.matchWith({Failure:function(){return u()},Success:function(n){var e=n.value;return o(e)}})}},9057:(n,e,t)=>{var r=t(136),o=r.Error,u=r.Ok;n.exports=function(n){return n.matchWith({Failure:function(n){var e=n.value;return o(e)},Success:function(n){var e=n.value;return u(e)}})}},3928:(n,e,t)=>{n.exports={lambda:t(1986),object:t(7469)}},6901:n=>{var e=function(n,e){return function(t){return n(e(t))}};e.infix=function(n){return e(n,this)},e.all=function(){for(var n=arguments.length,t=Array(n),r=0;r<n;r++)t[r]=arguments[r];if(t.length<1)throw new TypeError("compose.all requires at least one argument, "+arguments.length+" given.");return t.reduce(e)},n.exports=e},5161:n=>{n.exports=function(n){return function(e){return n}}},5927:n=>{function e(n){if(Array.isArray(n)){for(var e=0,t=Array(n.length);e<n.length;e++)t[e]=n[e];return t}return Array.from(n)}n.exports=function(n,t){return function r(o){return function(){for(var u=arguments.length,i=Array(u),a=0;a<u;a++)i[a]=arguments[a];var c=o.concat(i),s=c.length;return s<n?r(c):t.apply(void 0,e(c))}}([])}},625:n=>{n.exports=function(n){return n}},1986:(n,e,t)=>{n.exports={identity:t(625),constant:t(5161),curry:t(5927),compose:t(6901),partialize:t(8188)}},8188:n=>{var e={},t=function n(t,r){return function(){for(var o=arguments.length,u=Array(o),i=0;i<o;i++)u[i]=arguments[i];if(u.length<t)throw new TypeError("The partial function takes at least "+t+" arguments, but was given "+u.length+".");for(var a=0,c=0;c<u.length;++c)u[c]===e&&(a+=1);return a>0?n(a,(function(){for(var n=[],t=0,o=0;o<u.length;++o){var i=u[o];i===e?(n.push(arguments.length<=t?void 0:arguments[t]),t+=1):n.push(i)}return r.apply(void 0,n)})):r.apply(void 0,u)}};t.hole=e,n.exports=t},6088:n=>{var e=Object.defineProperty;n.exports=function(n){return n.reduce((function(n,t){var r=function(n,e){if(Array.isArray(n))return n;if(Symbol.iterator in Object(n))return function(n,e){var t=[],r=!0,o=!1,u=void 0;try{for(var i,a=n[Symbol.iterator]();!(r=(i=a.next()).done)&&(t.push(i.value),!e||t.length!==e);r=!0);}catch(n){o=!0,u=n}finally{try{!r&&a.return&&a.return()}finally{if(o)throw u}}return t}(n,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}(t,2),o=r[0],u=r[1];return e(n,o,{value:u,writable:!0,enumerable:!0,configurable:!0})}),{})}},7469:(n,e,t)=>{n.exports={mapEntries:t(4128),mapValues:t(3482),values:t(2705),toPairs:t(2655),fromPairs:t(6088)}},4128:n=>{var e=Object.prototype.hasOwnProperty,t=function(n,e,t){return Object.keys(n).reduce((function(r,o){var u=function(n,e){if(Array.isArray(n))return n;if(Symbol.iterator in Object(n))return function(n,e){var t=[],r=!0,o=!1,u=void 0;try{for(var i,a=n[Symbol.iterator]();!(r=(i=a.next()).done)&&(t.push(i.value),!e||t.length!==e);r=!0);}catch(n){o=!0,u=n}finally{try{!r&&a.return&&a.return()}finally{if(o)throw u}}return t}(n,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}(e([o,n[o]]),2),i=u[0],a=u[1];return t(r,i,a)}),{})};t.overwrite=function(n,e){return t(n,e,(function(n,e,t){return n[e]=t,n}))},t.unique=function(n,r){return t(n,r,(function(n,t,r){if(e.call(n,t))throw new Error("The property "+t+" already exists in the resulting object.");return n[t]=r,n}))},n.exports=t},3482:n=>{var e=function(n,e){for(var t=Object.keys(n),r={},o=0;o<t.length;++o){var u=t[o];r[u]=e(n[u])}return r};e.infix=function(n){return e(this,n)},n.exports=e},2655:n=>{n.exports=function(n){return Object.keys(n).map((function(e){return[e,n[e]]}))}},2705:n=>{n.exports=function(n){return Object.keys(n).map((function(e){return n[e]}))}},1760:(n,e,t)=>{var r=t(8234).alt,o=t(5927),u=t(7030)("alt"),i=t(7560)("alt"),a=function(n,e){return"function"==typeof e[r]?e[r](n):"function"==typeof n.alt?u(n.ap(e)):i(n)};a.curried=o(2,a),a.infix=function(n){return a(this,n)},n.exports=a},333:(n,e,t)=>{var r=t(8234).ap,o=t(5927),u=t(7030)("ap"),i=t(7560)("ap"),a=function(n,e){return"function"==typeof e[r]?e[r](n):"function"==typeof n.ap?u(n.ap(e)):i(n)};a.curried=o(2,a),a.infix=function(n){return a(this,n)},n.exports=a},3021:(n,e,t)=>{var r=t(8234).bimap,o=t(5927),u=t(7030)("bimap"),i=t(7560)("bimap"),a=function(n,e,t){return"function"==typeof n[r]?n[r](e,t):"function"==typeof n.bimap?u(n.bimap(e,t)):i(n)};a.curried=o(3,(function(n,e,t){return a(t,n,e)})),a.infix=function(n,e){return a(this,n,e)},n.exports=a},6678:(n,e,t)=>{var r=t(8234).chain,o=t(5927),u=t(7030)("chain"),i=t(7560)("chain"),a=function(n,e){return"function"==typeof n[r]?n[r](e):"function"==typeof n.chain?u(n.chain(e)):i(n)};a.curried=o(2,(function(n,e){return a(e,n)})),a.infix=function(n){return a(this,n)},n.exports=a},3442:(n,e,t)=>{var r=t(8234).concat,o=t(5927),u=t(7030)("concat"),i=t(7560)("concat"),a=function(n,e){return"function"==typeof n[r]?n[r](e):"function"==typeof n.concat?u(n.concat(e)):i(n)};a.curried=o(2,(function(n,e){return a(e,n)})),a.infix=function(n){return a(this,n)},n.exports=a},378:(n,e,t)=>{n.exports={apply:t(333).curried,bimap:t(3021).curried,chain:t(6678).curried,concat:t(3442).curried,empty:t(350).curried,equals:t(8579).curried,map:t(2066).curried,of:t(9418).curried}},350:(n,e,t)=>{var r=t(8234).empty,o=t(5927),u=t(7030)("empty"),i=t(7560)("empty"),a=function(n){return"function"==typeof n[r]?n[r]():"function"==typeof n.constructor[r]?n.constructor[r]():function(n){return"function"==typeof n.empty}(n)?u(n.empty()):function(n){return"function"==typeof n.constructor.empty}(n)?u(n.constructor.empty()):i(n)};a.curried=o(1,a),a.infix=function(){return a(this)},n.exports=a},8579:(n,e,t)=>{var r=t(8234).equals,o=t(5927),u=t(7030)("equals"),i=t(7560)("equals"),a=function(n,e){return"function"==typeof n[r]?n[r](e):"function"==typeof n.equals?u(n.equals(e)):i(n)};a.curried=o(2,(function(n,e){return a(e,n)})),a.infix=function(n){return a(this,n)},n.exports=a},3074:(n,e,t)=>{n.exports={apply:t(333),concat:t(3442),chain:t(6678),empty:t(350),map:t(2066),of:t(9418),equals:t(8579),bimap:t(3021),curried:t(378),infix:t(5313),alt:t(1760)}},5313:(n,e,t)=>{n.exports={apply:t(333).infix,bimap:t(3021).infix,chain:t(6678).infix,concat:t(3442).infix,empty:t(350).infix,equals:t(8579).infix,map:t(2066).infix,of:t(9418).infix}},2066:(n,e,t)=>{var r=t(8234).map,o=t(5927),u=t(7030)("map"),i=t(7560)("map"),a=function(n,e){return"function"==typeof n[r]?n[r](e):"function"==typeof n.map?u(n.map(e)):i(n)};a.curried=o(2,(function(n,e){return a(e,n)})),a.infix=function(n){return a(this,n)},n.exports=a},9418:(n,e,t)=>{var r=t(8234).of,o=t(5927),u=t(7030)("of"),i=t(7560)("of"),a=function(n,e){return"function"==typeof n[r]?n[r](e):"function"==typeof n.constructor[r]?n.constructor[r](e):function(n){return"function"==typeof n.of}(n)?u(n.of(e)):function(n){return"function"==typeof n.constructor.of}(n)?u(n.constructor.of(e)):i(n)};a.curried=o(2,a),a.infix=function(n){return a(this,n)},n.exports=a},2442:n=>{n.exports=function(n,e){if("function"!=typeof e)throw new TypeError(n+" expects a function, but was given "+e+".")}},8740:n=>{var e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n};n.exports=function(n,t){if("object"!==(void 0===t?"undefined":e(t)))throw new TypeError(n+" expects an Object, but was given "+t+".")}},6566:(n,e,t)=>{var r=t(2801).typeSymbol;n.exports=function(n){return function(e,t){var o=n[r];"none"===process.env.FOLKTALE_ASSERTIONS||n.isPrototypeOf(t)||(console.warn(o+"."+e+" expects a value of the same type, but was given "+t+"."),"minimal"!==process.env.FOLKTALE_ASSERTIONS&&console.warn("\nThis could mean that you've provided the wrong value to the method, in\nwhich case this is a bug in your program, and you should try to track\ndown why the wrong value is getting here.\n\nBut this could also mean that you have more than one "+o+" library\ninstantiated in your program. This is not **necessarily** a bug, it\ncould happen for several reasons:\n\n 1) You're loading the library in Node, and Node's cache didn't give\n    you back the same instance you had previously requested.\n\n 2) You have more than one Code Realm in your program, and objects\n    created from the same library, in different realms, are interacting.\n\n 3) You have a version conflict of folktale libraries, and objects\n    created from different versions of the library are interacting.\n\nIf your situation fits the cases (1) or (2), you are okay, as long as\nthe objects originate from the same version of the library. Folktale\ndoes not rely on reference checking, only structural checking. However\nyou'll want to watch out if you're modifying the "+o+"'s prototype,\nbecause you'll have more than one of them, and you'll want to make\nsure you do the same change in all of them — ideally you shouldn't\nbe modifying the object, though.\n\nIf your situation fits the case (3), you are *probably* okay if the\nversion difference isn't a major one. However, at this point the\nbehaviour of your program using "+o+" is undefined, and you should\ntry looking into why the version conflict is happening.\n\nParametric modules can help ensuring your program only has a single\ninstance of the folktale library. Check out the Folktale Architecture\ndocumentation for more information.\n      "))}}},308:n=>{var e=Symbol.for("@@meta:magical");n.exports=function(n,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};"undefined"!=typeof process&&"false"!==process.env.FOLKTALE_DOCS&&(t[e]=Object.assign({},n[e]||{},r))}},1600:n=>{var e="undefined"!=typeof setImmediate?function(n){return setImmediate(n)}:"undefined"!=typeof process?function(n){return process.nextTick(n)}:function(n){return setTimeout(n,0)};n.exports=e},7138:(n,e,t)=>{var r=t(308);n.exports=function(n,e){Object.keys(e).forEach((function(t){var o=e[t];n.variants.forEach((function(n){var e=o[n.tag];if(!e)throw new TypeError("Method "+t+" not defined for "+n.tag);r(o,e),n.prototype[t]=e}))}))}},9966:n=>{var e=Object.defineProperty;n.exports=function(n,t,r){e(n,t,{value:r,writable:!0,enumerable:!1,configurable:!0})}},8672:n=>{var e=Object.keys,t=Object.getOwnPropertySymbols,r=Object.defineProperty,o=Object.getOwnPropertyDescriptor;n.exports=function(n){for(var u=arguments.length,i=Array(u>1?u-1:0),a=1;a<u;a++)i[a-1]=arguments[a];return i.forEach((function(u){e(u).forEach((function(e){"prototype"===e?n[e]=u[e]:r(n,e,o(u,e))})),t(u).forEach((function(e){r(n,e,o(u,e))}))})),n}},8234:n=>{n.exports={equals:"fantasy-land/equals",concat:"fantasy-land/concat",empty:"fantasy-land/empty",map:"fantasy-land/map",ap:"fantasy-land/ap",of:"fantasy-land/of",alt:"fantasy-land/alt",reduce:"fantasy-land/reduce",traverse:"fantasy-land/traverse",chain:"fantasy-land/chain",chainRec:"fantasy-land/chainRec",extend:"fantasy-land/extend",extract:"fantasy-land/extract",bimap:"fantasy-land/bimap",promap:"fantasy-land/promap"}},5091:n=>{var e={equals:{"fantasy-land/equals":function(n){return this.equals(n)}},concat:{"fantasy-land/concat":function(n){return this.concat(n)}},empty:{"fantasy-land/empty":function(){return this.empty()}},map:{"fantasy-land/map":function(n){return this.map(n)}},apply:{ap:function(n){return this.apply(n)},"fantasy-land/ap":function(n){return n.apply(this)}},of:{"fantasy-land/of":function(n){return this.of(n)}},or:{"fantasy-land/alt":function(n){return this.or(n)},alt:function(n){return this.or(n)}},reduce:{"fantasy-land/reduce":function(n,e){return this.reduce(n,e)}},traverse:{"fantasy-land/traverse":function(n,e){return this.traverse(n,e)}},chain:{"fantasy-land/chain":function(n){return this.chain(n)}},chainRecursively:{chainRec:function(n,e){return this.chainRecursively(n,e)},"fantasy-land/chainRec":function(n,e){return this.chainRecursively(n,e)}},extend:{"fantasy-land/extend":function(n){return this.extend(n)}},extract:{"fantasy-land/extract":function(){return this.extract()}},bimap:{"fantasy-land/bimap":function(n,e){return this.bimap(n,e)}},promap:{"fantasy-land/promap":function(n,e){return this.promap(n,e)}}};n.exports=function(n){Object.keys(e).forEach((function(t){"function"==typeof n[t]&&Object.keys(e[t]).forEach((function(r){n[r]=e[t][r]}))}))}},2451:n=>{n.exports=function(n){var e=void 0,t=!1;return function(){return t?e:(t=!0,e=n())}}},7560:n=>{n.exports=function(n){return function(e){throw new TypeError(e+" does not have a method '"+n+"'.")}}},7030:(n,e,t)=>{var r=t(8289);n.exports=function(n){return function(e){return r("Type."+n+"() is being deprecated in favour of Type['fantasy-land/"+n+"'](). \n    Your data structure is using the old-style fantasy-land methods,\n    and these won't be supported in Folktale 3"),e}}},8289:n=>{n.exports=function(n){if("none"!==process.env.FOLKTALE_ASSERTIONS){var e=new Error("").stack,t=void 0;e&&(t=e.split("\n")[3]),t?console.warn(n+"\n    Blame: "+t.trim()):console.warn(n)}}},2651:(n,e,t)=>{n.exports={adt:t(1650),concurrency:t(2707),conversions:t(4835),core:t(3928),fantasyLand:t(3074),maybe:t(5358),result:t(6997),validation:t(5594)}},5358:(n,e,t)=>{var r;function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}var u=t(5257),i=t(2801).typeSymbol;n.exports=(o(r={Just:u.Just,Nothing:u.Nothing,hasInstance:u.hasInstance,of:u.of,empty:u.empty,fromJSON:u.fromJSON},i,u[i]),o(r,"fantasy-land/of",u["fantasy-land/of"]),o(r,"fromNullable",(function(n){return t(7889)(n)})),o(r,"fromResult",(function(n){return t(6105)(n)})),o(r,"fromValidation",(function(n){return t(8129)(n)})),r)},5257:(n,e,t)=>{var r=t(6566),o=t(2442),u=t(8581),i=u.union,a=u.derivations,c=t(5091),s=t(8289),l=t(7138),f=t(8672),p=a.equality,h=a.debugRepresentation,d=a.serialization,v=i("folktale:Maybe",{Nothing:function(){},Just:function(n){return{value:n}}}).derive(p,h,d),y=v.Nothing,m=v.Just,b=r(v);f(m.prototype,{get value(){throw new TypeError("`value` can’t be accessed in an abstract instance of Maybe.Just")}}),l(v,{map:{Nothing:function(n){return o("Maybe.Nothing#map",n),this},Just:function(n){return o("Maybe.Just#map",n),m(n(this.value))}},apply:{Nothing:function(n){return b("Maybe.Nothing#apply",n),this},Just:function(n){return b("Maybe.Just#apply",n),n.map(this.value)}},chain:{Nothing:function(n){return o("Maybe.Nothing#chain",n),this},Just:function(n){return o("Maybe.Just#chain",n),n(this.value)}},unsafeGet:{Nothing:function(){throw new TypeError("Can't extract the value of a Nothing.\n\n    Since Nothing holds no values, it's not possible to extract one from them.\n    You might consider switching from Maybe#get to Maybe#getOrElse, or some other method\n    that is not partial.\n      ")},Just:function(){return this.value}},getOrElse:{Nothing:function(n){return n},Just:function(n){return this.value}},orElse:{Nothing:function(n){return o("Maybe.Nothing#orElse",n),n(this.value)},Just:function(n){return o("Maybe.Nothing#orElse",n),this}},concat:{Nothing:function(n){return b("Maybe.Nothing#concat",n),n},Just:function(n){var e=this;return b("Maybe.Just#concat",n),n.matchWith({Nothing:function(){return m(e.value)},Just:function(n){return m(e.value.concat(n.value))}})}},cata:{Nothing:function(n){return s("`.cata(pattern)` is deprecated. Use `.matchWith(pattern)` instead."),n.Nothing()},Just:function(n){return s("`.cata(pattern)` is deprecated. Use `.matchWith(pattern)` instead."),n.Just(this.value)}},fold:{Nothing:function(n,e){return o("Maybe.Nothing#fold",n),o("Maybe.Nothing#fold",e),n()},Just:function(n,e){return o("Maybe.Just#fold",n),o("Maybe.Just#fold",e),e(this.value)}},filter:{Nothing:function(n){return o("Maybe.Nothing#filter",n),this},Just:function(n){return o("Maybe.Just#filter",n),n(this.value)?this:y()}},or:{Nothing:function(n){return b("Maybe.Nothing#or",n),n},Just:function(n){return b("Maybe.Just#or",n),this}}}),Object.assign(v,{of:function(n){return m(n)},empty:function(){return y()},get:function(){return s("`.get()` is deprecated, and has been renamed to `.unsafeGet()`."),this.unsafeGet()},toResult:function(n){return t(5601)(this,n)},toValidation:function(n){return t(9894)(this,n)}}),c(m.prototype),c(y.prototype),c(v),n.exports=v},6997:(n,e,t)=>{var r;function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}var u=t(136),i=t(2801).typeSymbol;n.exports=(o(r={Error:u.Error,Ok:u.Ok,hasInstance:u.hasInstance,of:u.of,fromJSON:u.fromJSON},i,u[i]),o(r,"try",t(1001)),o(r,"fromNullable",(function(n,e){var r=t(6329);return arguments.length>1?r(n,e):r(n)})),o(r,"fromValidation",(function(n){return t(9057)(n)})),o(r,"fromMaybe",(function(n,e){return t(5601)(n,e)})),r)},136:(n,e,t)=>{var r=t(6566),o=t(2442),u=t(8581),i=u.union,a=u.derivations,c=t(5091),s=t(7138),l=t(8672),f=t(8289),p=a.equality,h=a.debugRepresentation,d=a.serialization,v=i("folktale:Result",{Error:function(n){return{value:n}},Ok:function(n){return{value:n}}}).derive(p,h,d),y=v.Error,m=v.Ok,b=r(v);l(y.prototype,{get value(){throw new TypeError("`value` can’t be accessed in an abstract instance of Result.Error")}}),l(m.prototype,{get value(){throw new TypeError("`value` can’t be accessed in an abstract instance of Result.Ok")}}),s(v,{map:{Error:function(n){return o("Result.Error#map",n),this},Ok:function(n){return o("Result.Ok#map",n),m(n(this.value))}},apply:{Error:function(n){return b("Result.Error#apply",n),this},Ok:function(n){return b("Result.Ok#apply",n),n.map(this.value)}},chain:{Error:function(n){return o("Result.Error#chain",n),this},Ok:function(n){return o("Result.Ok#chain",n),n(this.value)}},unsafeGet:{Error:function(){throw new TypeError("Can't extract the value of an Error.\n\nError does not contain a normal value - it contains an error.\nYou might consider switching from Result#unsafeGet to Result#getOrElse,\nor some other method that is not partial.\n      ")},Ok:function(){return this.value}},getOrElse:{Error:function(n){return n},Ok:function(n){return this.value}},orElse:{Error:function(n){return o("Result.Error#orElse",n),n(this.value)},Ok:function(n){return o("Result.Ok#orElse",n),this}},concat:{Error:function(n){return b("Result.Error#concat",n),this},Ok:function(n){var e=this;return b("Result.Ok#concat",n),n.map((function(n){return e.value.concat(n)}))}},fold:{Error:function(n,e){return o("Result.Error#fold",n),o("Result.Error#fold",e),n(this.value)},Ok:function(n,e){return o("Result.Ok#fold",n),o("Result.Ok#fold",e),e(this.value)}},swap:{Error:function(){return m(this.value)},Ok:function(){return y(this.value)}},bimap:{Error:function(n,e){return o("Result.Error#bimap",n),o("Result.Error#bimap",e),y(n(this.value))},Ok:function(n,e){return o("Result.Ok#bimap",n),o("Result.Ok#bimap",e),m(e(this.value))}},mapError:{Error:function(n){return o("Result.Error#mapError",n),y(n(this.value))},Ok:function(n){return o("Result.Ok#mapError",n),this}},filter:{Error:function(n){return o("Result.Error#filter",n),this},Ok:function(n){return o("Result.Ok#filter",n),n(this.value)?this:y(this.value)}}}),Object.assign(v,{of:function(n){return m(n)},get:function(){return f("`.get()` is deprecated, and has been renamed to `.unsafeGet()`."),this.unsafeGet()},merge:function(){return this.value},toValidation:function(){return t(1969)(this)},toMaybe:function(){return t(6105)(this)}}),c(y.prototype),c(m.prototype),c(v),n.exports=v},1001:(n,e,t)=>{var r=t(136),o=r.Error,u=r.Ok;n.exports=function(n){try{return u(n())}catch(n){return o(n)}}},6230:(n,e,t)=>{var r=t(2418).Failure;n.exports=function(n,e){return n.matchWith({Success:function(n){var t=n.value;return e(t)},Failure:function(n){var e=n.value;return r(e)}})}},7835:(n,e,t)=>{var r=t(2418).Success;n.exports=function(n){return n.reduce((function(n,e){return n.concat(e)}),r())}},5594:(n,e,t)=>{var r;function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}var u=t(2418),i=t(2801).typeSymbol;n.exports=(o(r={Success:u.Success,Failure:u.Failure,hasInstance:u.hasInstance,of:u.of,fromJSON:u.fromJSON},i,u[i]),o(r,"collect",t(7835)),o(r,"chain",t(6230)),o(r,"fromNullable",(function(n,e){return t(613)(n,e)})),o(r,"fromResult",(function(n){return t(1969)(n)})),o(r,"fromMaybe",(function(n,e){return t(9894)(n,e)})),r)},2418:(n,e,t)=>{var r=t(6566),o=t(2442),u=t(8581),i=u.union,a=u.derivations,c=t(5091),s=t(7138),l=t(8672),f=t(8289),p=a.equality,h=a.debugRepresentation,d=a.serialization,v=i("folktale:Validation",{Failure:function(n){return{value:n}},Success:function(n){return{value:n}}}).derive(p,h,d),y=v.Success,m=v.Failure,b=r(v);l(m.prototype,{get value(){throw new TypeError("`value` can’t be accessed in an abstract instance of Validation.Failure")}}),l(y.prototype,{get value(){throw new TypeError("`value` can’t be accessed in an abstract instance of Validation.Success")}}),s(v,{map:{Failure:function(n){return o("Validation.Failure#map",n),this},Success:function(n){return o("Validation.Success#map",n),y(n(this.value))}},apply:{Failure:function(n){return b("Failure#apply",n),m.hasInstance(n)?m(this.value.concat(n.value)):this},Success:function(n){return b("Success#apply",n),m.hasInstance(n)?n:n.map(this.value)}},unsafeGet:{Failure:function(){throw new TypeError("Can't extract the value of a Failure.\n\n    Failure does not contain a normal value - it contains an error.\n    You might consider switching from Validation#get to Validation#getOrElse, or some other method\n    that is not partial.\n      ")},Success:function(){return this.value}},getOrElse:{Failure:function(n){return n},Success:function(n){return this.value}},orElse:{Failure:function(n){return o("Validation.Failure#orElse",n),n(this.value)},Success:function(n){return o("Validation.Success#orElse",n),this}},concat:{Failure:function(n){return b("Validation.Failure#concat",n),m.hasInstance(n)?m(this.value.concat(n.value)):this},Success:function(n){return b("Validation.Success#concat",n),n}},fold:{Failure:function(n,e){return o("Validation.Failure#fold",n),o("Validation.Failure#fold",e),n(this.value)},Success:function(n,e){return o("Validation.Success#fold",n),o("Validation.Success#fold",e),e(this.value)}},swap:{Failure:function(){return y(this.value)},Success:function(){return m(this.value)}},bimap:{Failure:function(n,e){return o("Validation.Failure#fold",n),o("Validation.Failure#fold",e),m(n(this.value))},Success:function(n,e){return o("Validation.Success#fold",n),o("Validation.Success#fold",e),y(e(this.value))}},mapFailure:{Failure:function(n){return o("Validation.Failure#mapFailure",n),m(n(this.value))},Success:function(n){return o("Validation.Failure#mapFailure",n),this}}}),Object.assign(v,{of:function(n){return y(n)},get:function(){return f("`.get()` is deprecated, and has been renamed to `.unsafeGet()`."),this.unsafeGet()},merge:function(){return this.value},toResult:function(){return t(9057)(this)},toMaybe:function(){return t(8129)(this)}}),c(y.prototype),c(m.prototype),c(v),n.exports=v}},e={};return function t(r){var o=e[r];if(void 0!==o)return o.exports;var u=e[r]={exports:{}};return n[r](u,u.exports,t),u.exports}(2651)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,