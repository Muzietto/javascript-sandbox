{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1040\deflangfe1040{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f36\froman\fcharset238\fprq2 Times New Roman CE;}{\f37\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f39\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f40\froman\fcharset162\fprq2 Times New Roman Tur;}{\f41\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f42\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f43\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f44\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f56\fmodern\fcharset238\fprq1 Courier New CE;}{\f57\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f59\fmodern\fcharset161\fprq1 Courier New Greek;}
{\f60\fmodern\fcharset162\fprq1 Courier New Tur;}{\f61\fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f62\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f63\fmodern\fcharset186\fprq1 Courier New Baltic;}
{\f64\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 \snext0 Normal;}{
\s1\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\fs48\lang1040\langfe1040\kerning36\cgrid\langnp1040\langfenp1040 \sbasedon0 \snext1 \styrsid9400381 heading 1;}{
\s2\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \b\fs36\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 \sbasedon0 \snext2 \styrsid9400381 heading 2;}{
\s3\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0 \b\fs27\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 \sbasedon0 \snext3 \styrsid9400381 heading 3;}{\*\cs10 \additive \ssemihidden 
Default Paragraph Font;}{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}{
\s15\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 \sbasedon0 \snext15 \styrsid9400381 Normal (Web);}{\*\cs16 \additive \ul\cf2 
\sbasedon10 \styrsid9400381 Hyperlink;}{\s17\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\f2\fs20\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 \sbasedon0 \snext17 \styrsid9400381 HTML Preformatted;}}{\*\latentstyles\lsdstimax156\lsdlockeddef0}{\*\pgptbl {\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}}{\*\rsidtbl \rsid9400381\rsid15927384}
{\*\generator Microsoft Word 11.0.5604;}{\info{\title Javascript anonymous functions}{\author Marco Faustinelli}{\operator Marco Faustinelli}{\creatim\yr2009\mo9\dy30\hr14\min40}{\revtim\yr2009\mo10\dy1\hr9\min20}{\printim\yr2009\mo9\dy30\hr14\min41}
{\version1}{\edmins18}{\nofpages4}{\nofwords1513}{\nofchars8627}{\*\company Kelyan SMC}{\nofcharsws10120}{\vern24689}}\paperw11906\paperh16838\margl1134\margr1134\margt899\margb899 
\deftab708\widowctrl\ftnbj\aenddoc\hyphhotz283\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1134\dgvorigin899\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale76\viewzk1\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel
\wrppunct\asianbrkrule\rsidroot9400381\newtblstyruls\nogrowautofit \fet0\sectd \linex0\headery708\footery708\colsx708\endnhere\sectlinegrid360\sectdefaultcl\sectrsid9400381\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \s1\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0\pararsid9400381 \b\fs48\lang1040\langfe1040\kerning36\cgrid\langnp1040\langfenp1040 {
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 Javascript anonymous functions
\par }\pard\plain \s15\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
Anonymous functions are functions that are dynamically declared at runtime that don\rquote t have to be given a name.
\par Anonymous functions are declared using the }{\field\fldedit{\*\fldinst {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  
HYPERLINK "http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Operators:Special_Operators:function_Operator" }}{\fldrslt {\cs16\ul\cf2\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 function operator}}}{
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 . You can use the function operator to create a new function wherever it\rquote s valid to put an expression. 
For example you could declare a new function as a parameter to a function call or to assign a property of another object.
\par The function operator returns a reference to the function that was just created. The function can then be assigned to a variable, passed as a parameter or returned from another function. This is possible because }{\field\fldedit{\*\fldinst {
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  HYPERLINK "http://helephant.com/2008/08/functions-are-first-class-objects-in-javascript/" }}{\fldrslt {\cs16\ul\cf2\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
functions are first class objects}}}{\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  in javascript.
\par Here\rquote s an example where a function is declared in the regular way using the }{\field\fldedit{\*\fldinst {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  
HYPERLINK "http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Statements:function" }}{\fldrslt {\cs16\ul\cf2\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 function statement}}}{
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 :}{\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 
\f2\fs20\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 function eatCake()\{
\par     alert("So delicious and moist";)
\par ;\}
\par eatCake();
\par }\pard\plain \s15\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
Here\rquote s an example where the same function is declared dynamically using the function operator:}{\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 
\f2\fs20\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 var eatCakeAnon = function()\{
\par     alert("So delicious and moist";)
\par ;\}
\par eatCakeAnon();
\par }\pard\plain \s15\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\field\fldedit{\*\fldinst {
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  HYPERLINK "http://helephant.com/wp-content/uploads/2008/11/anonymousfunction.html" }}{\fldrslt {\cs16\ul\cf2\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 Complete example}}}{
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 .
\par }\pard\plain \s2\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid9400381 \b\fs36\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 Why is this useful?
\par }\pard\plain \s15\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
Anonymous functions are a really useful part of javascript. Once you understand what they are, you\rquote ll start seeing them everywhere in javascript code examples and libraries.
\par }\pard\plain \s3\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid9400381 \b\fs27\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 Pass logic to another function
\par }\pard\plain \s15\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
Anonymous functions are also really handy when you need to pass a little bit of code to a another function. If the function you need is very short, it\rquote s often convenient to declare it when you call the function you want to pass it to:}{
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 
\f2\fs20\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 window.addEventListener("load",
\par      function() \{ alert("All done");\},
\par false);
\par }\pard\plain \s3\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid9400381 \b\fs27\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 Declaring single use functions
\par }\pard\plain \s15\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
Anonymous functions can help make code more concise when declaring a function that will only be used in one place. Rather than having to declare the function and then use it you can do both in one step. It\rquote 
s particularly useful for things like declaring event handlers and assigning methods to objects.
\par For example, if we\rquote re creating a }{\field\fldedit{\*\fldinst {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  HYPERLINK "http://helephant.com/2008/09/constructor-functions/" }}{\fldrslt {
\cs16\ul\cf2\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 constructor function}}}{\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 , we\rquote ll need to declare the object\rquote s methods and then assign them to the object
\rquote s properties so they can be called outside the object. It\rquote s possible to declare the function and then assign it to a variable as a separate step like this:}{\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 
\f2\fs20\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 function Pet(name, species, hello)\{
\par     this.name = name;
\par     this.species = species;
\par     this.hello = hello;
\par     function sayHello()
\par     \{
\par         alert(this.hello);
\par     \}
\par     this.sayHello = sayHello;
\par \}
\par }\pard\plain \s15\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
But it\rquote s a bit more convenient and concise to do it all as one step:}{\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 
\f2\fs20\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 function Pet2(name, species, hello)\{
\par     this.name = name;
\par     this.species = species;
\par     this.hello = hello;
\par     this.sayHello = function()
\par     \{
\par         alert(this.hello);
\par     \}
\par \}
\par }\pard\plain \s15\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\field\fldedit{\*\fldinst {
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  HYPERLINK "http://helephant.com/wp-content/uploads/2008/11/anonymousfunction2.html" }}{\fldrslt {\cs16\ul\cf2\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 Complete example}}}
{\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 .
\par Both syntaxes have exactly the same result. The anonymous function just keeps the function declaration in the place where it will be used and saves a few lines of code.
\par }\pard\plain \s3\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid9400381 \b\fs27\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 Declaring a function without adding a variable to the scope
\par }\pard\plain \s15\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
Anonymous functions don\rquote t automatically get a name so they won\rquote t potentially overwrite other variables in the current scope.
\par If you\rquote re working in the scope of another function, this isn\rquote t such a big deal. You can (hopefully) keep track of all the variables in scope in your head. It\rquote 
s can just be a convenience not to have think of a name for a function that you are going to straight away assign to another value and will never want to call by name. It\rquote s just neat programming. In the example above, we don\rquote 
t really get any benefit from giving the sayHello function a name in the local scope.
\par If you\rquote re working in the global scope (and you }{\field\fldedit{\*\fldinst {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  HYPERLINK "http://yuiblog.com/blog/2006/06/01/global-domination/" }}{\fldrslt {
\cs16\ul\cf2\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 really shouldn\rquote t be}}}{\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
 if you can help it) it becomes critical because the global scope is a lot bigger and it can be a lot harder to see what\rquote s declared already. Javascript won\rquote t tell you if you declare a variable twice. It will just overwr
ite the original with the new one. This is even more likely if you start using javascript from multiple sources like third party javascript libraries.
\par }{\field\fldedit{\*\fldinst {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  HYPERLINK "http://www.helephant.com/article.aspx?ID=1198" }}{\fldrslt {\cs16\ul\cf2\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 Namespacing}}}{
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  in javascript works in exactly this way. It uses objects literals and anonymous functions to give each function a scope so the global scope doesn\rquote t end up full of }
{\field\fldedit{\*\fldinst {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  HYPERLINK "http://yuiblog.com/blog/2006/06/01/global-domination/" }}{\fldrslt {\cs16\ul\cf2\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
potentially conflicting names}}}{\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 :}{\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 
\f2\fs20\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 var helephant = \{
\par     bakeCake : function()
\par     \{
\par         alert("flour + eggs + sugar");
\par     \},
\par     eatCake : function()
\par     \{
\par        alert("So delicious and moist!");
\par     \}
\par \}
\par helephant.bakeCake();
\par helephant.eatCake();
\par }\pard\plain \s15\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\field\fldedit{\*\fldinst {
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  HYPERLINK "http://helephant.com/wp-content/uploads/2008/11/anonymous3.html" }}{\fldrslt {\cs16\ul\cf2\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 Complete example}}}{
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 .
\par }\pard\plain \s3\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid9400381 \b\fs27\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 Provides scope for variables
\par }\pard\plain \s15\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
Variables are scoped at the function level in javascript. This is different to what you might be used to in a language like C# or Java where the variables are scoped to the block. 
What this means is if you declare a variable inside a loop or an if statement, it will be available to the entire function.
\par If you ever find yourself needing to explicitly scope a variable inside a function you can use an anonymous function to do this. 
You can actually create an anonymous function and then execute it straight away and all the variables inside will be scoped to the anonymous function:}{\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 
\f2\fs20\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 (function() \{
\par     var myProperty = "hello world";
\par     alert(myProperty);
\par \})();
\par alert(typeof(myProperty)); // undefined
\par }\pard\plain \s15\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\field\fldedit{\*\fldinst {
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  HYPERLINK "http://helephant.com/wp-content/uploads/2008/11/anonymous4.html" }}{\fldrslt {\cs16\ul\cf2\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 Complete example}}}{
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 .
\par Some people use this if they want to do some processing the global scope but don\rquote t want to add new members.
\par }\pard\plain \s3\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid9400381 \b\fs27\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 Dynamic programming
\par }\pard\plain \s15\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
One of the big differences between javascript and more traditional languages like C# is that javascript is dynamic. Anonymous functions is one of the big ways to take advantage of that in your code.
\par Imagine that you\rquote re an programmer who has created a new type of textbox that filters the user\rquote s input based on data type. 
So you can say that the user is only allowed to enter numbers into the textbox and any other characters will be filtered. You\rquote re using the }{\field\fldedit{\*\fldinst {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  
HYPERLINK "http://ajax.asp.net" }}{\fldrslt {\cs16\ul\cf2\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 ASP.NET ajax framework}}}{\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
 (because the place you work is a Microsoft shop and you have to) and the convention for ASP.NET ajax server controls is to use a get/set method to access any properties on your object.
\par Your textbox has three different properties (maxLength, cssClass and dataType) which means six boring little methods you have to write that will just clutter up your textbox\rquote s javascript declaration and won\rquote 
t really add anything to the logic.
\par Here\rquote s a bit of a subversive idea.. why don\rquote t we get the computer to do the work? Why don\rquote t we make the textbox automatically generate the get/set methods from the properties when it initializes itself? 
That way we can have six less methods in our javascript object and if we add another property it will automatically get the methods.
\par This example creates an init function that takes a list of server properties and values and then creates a getter and setter on the object for each one. This is possible because we can create as many new anonymous functions as we like at runtime:}{
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 
\f2\fs20\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 $helephant.components = \{
\par     init : function(object, serverProperties)
\par     \{
\par         for(var property in serverProperties)
\par         \{
\par             // set the textbox's property
\par             $helephant.components.createGetter(textbox, property);
\par             $helephant.components.createSetter(textbox, property, serverProperties[property]);
\par         \}
\par     \},
\par 
\par     createGetter : function(object, property)
\par     \{
\par         var propertyName = "get_" + property;
\par         if(typeof(object.constructor.prototype[propertyName]) == "undefined")
\par         \{
\par             object.constructor.prototype[propertyName] = function()
\par             \{
\par                 return this[property];
\par             \};
\par         \}
\par     \},
\par 
\par     createSetter : function(object, property, initialValue)
\par     \{
\par         var propertyName = "set_" + property;
\par         if(typeof(object.constructor.prototype[propertyName]) == "undefined")
\par         \{
\par             object.constructor.prototype[propertyName] = function(value)
\par             \{
\par                 this[property] = value;
\par             \};
\par         \}
\par         if(typeof(initialValue) != "undefined")
\par             object[propertyName](initialValue);
\par     \}
\par \}
\par }\pard\plain \s15\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
The code that calls the methods never needs to know they were dynamically generated. It calls them in exactly the same way as a usual method:}{\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 
\f2\fs20\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 var maxLength = textbox.get_maxLength();
\par textbox.set_cssClass("redAlert");
\par }\pard\plain \s15\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\field\fldedit{\*\fldinst {
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  HYPERLINK "http://helephant.com/wp-content/uploads/2008/11/anonymous5.html" }}{\fldrslt {\cs16\ul\cf2\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 Complete example}}}{
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 .
\par Another example of this is in the }{\field\fldedit{\*\fldinst {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  HYPERLINK "http://jquery.com/" }}{\fldrslt {\cs16\ul\cf2\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 JQuery}}}
{\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  library where they set up the }{\field\fldedit{\*\fldinst {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  HYPERLINK "http://docs.jquery.com/Events" }}{\fldrslt {
\cs16\ul\cf2\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 convenient helper methods for binding to events}}}{\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381  from a list of events that are supported:}{
\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 
\f2\fs20\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 jQuery.each( ("blur,focus,load,resize,scroll,unload,click,dblclick," +
\par     "mousedown,mouseup,mousemove,mouseover,mouseout,change,select," +
\par     "submit,keydown,keypress,keyup,error").split(","), function(i, name)\{
\par 
\par     // Handle event binding
\par     jQuery.fn[name] = function(fn)\{
\par         return fn ? this.bind(name, fn) : this.trigger(name);
\par     \};
\par \});
\par }\pard\plain \s15\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid9400381 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
This may look a little unfamiliar to people who are used to statically typed languages like C#. What you have to remember is that you don\rquote t get the static typed safety in javascript whatever you do because javascript doesn\rquote t work like that. 
The only thing you can do is try to get the most out of the language features that javascript does have.
\par }\pard\plain \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1040\langfe1040\cgrid\langnp1040\langfenp1040 {\lang2057\langfe1040\langnp2057\insrsid9400381\charrsid9400381 
\par }}